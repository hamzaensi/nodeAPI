1: Initialisation du projet Flutter
1.1: Créer un nouveau projet Flutter.
1.2: Configurer les dépendances nécessaires dans le fichier pubspec.yaml :
- get
- http
- flutter_spinkit (pour les indicateurs de chargement, optionnel)

2- Test le back-end avec Node.js : node server.js
http://localhost:3000/api/tasks

3. Intégration de l'API dans Flutter
3.1 : Configurer un service API dans Flutter pour effectuer des 3.3.2 : appels HTTP (GET, POST, PUT, DELETE) vers l'API Node.js.
3.3 : Créer un modèle Dart pour représenter les tâches.

4. Implémentation de la gestion d'état avec GetX
4.1 Créer un TaskController avec :
4.2 Une liste observable des tâches.
4.3 Méthodes pour ajouter, modifier, supprimer et récupérer les tâches via l'API.
4.5 Gérer les états de chargement (loading) et les erreurs avec GetX.

5. Création de l'interface utilisateur
5.1 Écran principal avec une liste de tâches affichées dans trois colonnes : ToDo, Doing, et Done.
5.2 Un bouton flottant pour ajouter une nouvelle tâche :
5.3 Formulaire pour saisir le titre et la description de la tâche.
5.4 Fonctionnalité de glisser-déposer (drag-and-drop) ou d'interaction pour changer l'état d'une tâche.
5.5 Mise à jour automatique de l'interface grâce à GetX.
6. Ajout de la navigation
6.1 Utiliser GetX pour une navigation simple :
6.2 Écran de connexion (Login, password).
6.3 Écran principal (liste des tâches).
6.4 Écran d'ajout ou de modification d'une tâche.

